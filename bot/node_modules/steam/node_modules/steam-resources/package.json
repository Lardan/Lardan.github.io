{
  "name": "steam-resources",
  "version": "1.0.0",
  "description": "Steam resources for Node.js",
  "scripts": {
    "prepublish": "svn checkout https://github.com/SteamRE/SteamKit/trunk/Resources/Protobufs protobufs && svn checkout https://github.com/SteamRE/SteamKit/trunk/Resources/SteamLanguage steam_language"
  },
  "dependencies": {
    "bytebuffer": "^5.0",
    "protobufjs": "^4.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/seishun/node-steam-resources"
  },
  "keywords": [
    "steam"
  ],
  "author": {
    "name": "Nikolai Vavilov",
    "email": "vvnicholas@gmail.com"
  },
  "license": "MIT",
  "gitHead": "1403939a12ba467a4b82c8ccbc279bbcdad43588",
  "readme": "# node-steam-resources\n\nThis is a node wrapper around Steam resources ([Protobufs](https://github.com/SteamRE/SteamKit/tree/master/Resources/Protobufs) and [SteamLanguage](https://github.com/SteamRE/SteamKit/tree/master/Resources/SteamLanguage)) from [SteamKit](https://github.com/SteamRE/SteamKit). It's primarily intended for [node-steam](https://github.com/seishun/node-steam) extension module authors.\n\n# Installation\n\n1. `npm install git://github.com/seishun/node-steam-resources.git`\n2. Run `npm install` in the `steam-resources` directory to run the `prepublish` script (see [npm/npm#3055](https://github.com/npm/npm/issues/3055)). It pulls the Steam resources from SteamKit and requires `svn`.\n3. If you're going to publish your module, add `steam-resources` to `bundledDependencies` in your `package.json`, since you want to publish with the resources bundled. Note that `npm publish` will bundle the dependencies of `steam-resources` as well. You could delete `steam-resources/node_modules` manually before publishing, but npm <3 doesn't install dependencies of bundled dependencies automatically.\n\nIf you ever need to update the resources, just run `npm install` in the `steam-resources` directory again.\n\n# Usage\n\n```js\nvar Steam = require('steam-resources');\n```\n\n`Steam` is now a namespace object containing enums and classes generated from the protobufs and SteamLanguage.\n\n# Enums\n\nFor each enum in SteamLanguage, there is an equivalently named property on `Steam`. The property is an object; for each of the enum's members, there is an equivalently named property on the object with an equivalent Number value.\n\nFor example, `Steam.EClanPermission.OwnerOfficerModerator` is equal to `11`.\n\n# Protobufs\n\nFor each protobuf message or enum available in SteamKit2, there is an equivalently named class or enum generated using [ProtoBuf.js](https://github.com/dcodeIO/ProtoBuf.js) version [^4.1](https://docs.npmjs.com/misc/semver#caret-ranges-1-2-3-0-2-5-0-0-4). They lie in the same hierarchy as in SteamKit2, with objects for namespaces. (If you see a mismatch, consider that a bug.)\n\nFor example, the `CMsgGCTopCustomGamesList` message from [dota_gcmessages_common.proto](https://github.com/SteamRE/SteamKit/blob/master/Resources/Protobufs/dota/dota_gcmessages_common.proto) is available as `SteamKit2.GC.Dota.Internal.CMsgGCTopCustomGamesList` in SteamKit2 and as `Steam.GC.Dota.Internal.CMsgGCTopCustomGamesList` here.\n\n# Structs\n\nFor each class in SteamLanguage, there is an equivalently named class in `Steam.Internal`. They are intended to implement a subset of the API provided by ProtoBuf.js message classes. Namely, for a class `MsgGabe`:\n\n* An `MsgGabe` instance has an equivalently named property for each non-const member of `MsgGabe` with the type as follows (modifiers like `boolmarshal` are ignored):\n  * byte<> members: [ByteBuffer.js](https://github.com/dcodeIO/ByteBuffer.js) ^5.0 objects\n  * `long` and `ulong` members: [ByteBuffer.Long](https://github.com/dcodeIO/Long.js) objects\n  * Other numeric members: Number\n  * Protobuf message members: message class instances\n* For each const member of `MsgGabe`, there is an equivalently named property on the `MsgGabe` class with an equivalent value.\n* `MsgGabe.decode(buf)` returns an `MsgGabe` instance deserialized from `buf`. `buf` can be either a Buffer or a ByteBuffer.js ^5.0 instance. In the latter case, it decodes starting from `buf.offset` and increments it by message size.\n* `new MsgGabe(obj)` creates an `MsgGabe` instance from an object. `new MsgGabe()` is equivalent to `new MsgGabe({})`. For each non-const member of `MsgGabe`, if there is an equivalently named property in `obj`, it sets the instance property to the (possibly converted) value of the property in `obj`, otherwise to the default value. In addition to the types listed above, `obj` properties can have the following types:\n  * byte<> members: Buffer objects (converted using `ByteBuffer.wrap`)\n  * Numeric members: String or Number (converted using `Long.fromValue`)\n  * Protobuf message members: objects (converted using the message class constructor)\n* An `MsgGabe` instance `gabe` has the following methods:\n    * `gabe.encode()` serializes the `MsgGabe` instance and returns a ByteBuffer.js ^5.0 object.\n    * `gabe.toBuffer()` returns `this.encode().toBuffer()`.\n\nFor example, `MsgClientChatRoomInfo` can be used as follows:\n\n```js\nvar chatRoomInfo = new Steam.Internal.MsgClientChatRoomInfo({\n  steamIdChat: '103582791432594962'\n});\nvar buf = chatRoomInfo.toBuffer();\nvar chatRoomInfo2 = Steam.Internal.MsgClientChatRoomInfo.decode(buf);\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/seishun/node-steam-resources/issues"
  },
  "homepage": "https://github.com/seishun/node-steam-resources",
  "_id": "steam-resources@1.0.0",
  "_shasum": "19fd16f4d9d419e53032e53cbd689c5eb7127711",
  "_from": "git+https://github.com/seishun/node-steam-resources.git#v1.0.0",
  "_resolved": "git+https://github.com/seishun/node-steam-resources.git#1403939a12ba467a4b82c8ccbc279bbcdad43588"
}

{
  "_args": [
    [
      "steam-resources@github:seishun/node-steam-resources#v1.0.0",
      "D:\\Libraries\\Documents\\Repos\\Node Modules\\steam-client"
    ]
  ],
  "_from": "seishun/node-steam-resources#v1.0.0",
  "_id": "steam-resources@1.0.0",
  "_inCache": true,
  "_location": "/steam-resources",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/seishun/node-steam-resources/v1.0.0/package.json",
      "gitUrl": "git://github.com/seishun/node-steam-resources.git#v1.0.0",
      "httpsUrl": "git+https://github.com/seishun/node-steam-resources.git#v1.0.0",
      "shortcut": "github:seishun/node-steam-resources#v1.0.0",
      "ssh": "git@github.com:seishun/node-steam-resources.git#v1.0.0",
      "sshUrl": "git+ssh://git@github.com/seishun/node-steam-resources.git#v1.0.0",
      "type": "github"
    },
    "name": "steam-resources",
    "raw": "steam-resources@github:seishun/node-steam-resources#v1.0.0",
    "rawSpec": "github:seishun/node-steam-resources#v1.0.0",
    "scope": null,
    "spec": "github:seishun/node-steam-resources#v1.0.0",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/seishun/node-steam-resources.git#1403939a12ba467a4b82c8ccbc279bbcdad43588",
  "_shasum": "6d4a889b8abff02056130fa85068795921481d63",
  "_shrinkwrap": null,
  "_spec": "steam-resources@github:seishun/node-steam-resources#v1.0.0",
  "_where": "D:\\Libraries\\Documents\\Repos\\Node Modules\\steam-client",
  "author": {
    "email": "vvnicholas@gmail.com",
    "name": "Nikolai Vavilov"
  },
  "bugs": {
    "url": "https://github.com/seishun/node-steam-resources/issues"
  },
  "dependencies": {
    "bytebuffer": "^5.0",
    "protobufjs": "^4.1"
  },
  "description": "Steam resources for Node.js",
  "devDependencies": {},
  "gitHead": "1403939a12ba467a4b82c8ccbc279bbcdad43588",
  "homepage": "https://github.com/seishun/node-steam-resources#readme",
  "installable": true,
  "keywords": [
    "steam"
  ],
  "license": "MIT",
  "name": "steam-resources",
  "optionalDependencies": {},
  "readme": "# node-steam-resources\r\n\r\nThis is a node wrapper around Steam resources ([Protobufs](https://github.com/SteamRE/SteamKit/tree/master/Resources/Protobufs) and [SteamLanguage](https://github.com/SteamRE/SteamKit/tree/master/Resources/SteamLanguage)) from [SteamKit](https://github.com/SteamRE/SteamKit). It's primarily intended for [node-steam](https://github.com/seishun/node-steam) extension module authors.\r\n\r\n# Installation\r\n\r\n1. `npm install git://github.com/seishun/node-steam-resources.git`\r\n2. Run `npm install` in the `steam-resources` directory to run the `prepublish` script (see [npm/npm#3055](https://github.com/npm/npm/issues/3055)). It pulls the Steam resources from SteamKit and requires `svn`.\r\n3. If you're going to publish your module, add `steam-resources` to `bundledDependencies` in your `package.json`, since you want to publish with the resources bundled. Note that `npm publish` will bundle the dependencies of `steam-resources` as well. You could delete `steam-resources/node_modules` manually before publishing, but npm <3 doesn't install dependencies of bundled dependencies automatically.\r\n\r\nIf you ever need to update the resources, just run `npm install` in the `steam-resources` directory again.\r\n\r\n# Usage\r\n\r\n```js\r\nvar Steam = require('steam-resources');\r\n```\r\n\r\n`Steam` is now a namespace object containing enums and classes generated from the protobufs and SteamLanguage.\r\n\r\n# Enums\r\n\r\nFor each enum in SteamLanguage, there is an equivalently named property on `Steam`. The property is an object; for each of the enum's members, there is an equivalently named property on the object with an equivalent Number value.\r\n\r\nFor example, `Steam.EClanPermission.OwnerOfficerModerator` is equal to `11`.\r\n\r\n# Protobufs\r\n\r\nFor each protobuf message or enum available in SteamKit2, there is an equivalently named class or enum generated using [ProtoBuf.js](https://github.com/dcodeIO/ProtoBuf.js) version [^4.1](https://docs.npmjs.com/misc/semver#caret-ranges-1-2-3-0-2-5-0-0-4). They lie in the same hierarchy as in SteamKit2, with objects for namespaces. (If you see a mismatch, consider that a bug.)\r\n\r\nFor example, the `CMsgGCTopCustomGamesList` message from [dota_gcmessages_common.proto](https://github.com/SteamRE/SteamKit/blob/master/Resources/Protobufs/dota/dota_gcmessages_common.proto) is available as `SteamKit2.GC.Dota.Internal.CMsgGCTopCustomGamesList` in SteamKit2 and as `Steam.GC.Dota.Internal.CMsgGCTopCustomGamesList` here.\r\n\r\n# Structs\r\n\r\nFor each class in SteamLanguage, there is an equivalently named class in `Steam.Internal`. They are intended to implement a subset of the API provided by ProtoBuf.js message classes. Namely, for a class `MsgGabe`:\r\n\r\n* An `MsgGabe` instance has an equivalently named property for each non-const member of `MsgGabe` with the type as follows (modifiers like `boolmarshal` are ignored):\r\n  * byte<> members: [ByteBuffer.js](https://github.com/dcodeIO/ByteBuffer.js) ^5.0 objects\r\n  * `long` and `ulong` members: [ByteBuffer.Long](https://github.com/dcodeIO/Long.js) objects\r\n  * Other numeric members: Number\r\n  * Protobuf message members: message class instances\r\n* For each const member of `MsgGabe`, there is an equivalently named property on the `MsgGabe` class with an equivalent value.\r\n* `MsgGabe.decode(buf)` returns an `MsgGabe` instance deserialized from `buf`. `buf` can be either a Buffer or a ByteBuffer.js ^5.0 instance. In the latter case, it decodes starting from `buf.offset` and increments it by message size.\r\n* `new MsgGabe(obj)` creates an `MsgGabe` instance from an object. `new MsgGabe()` is equivalent to `new MsgGabe({})`. For each non-const member of `MsgGabe`, if there is an equivalently named property in `obj`, it sets the instance property to the (possibly converted) value of the property in `obj`, otherwise to the default value. In addition to the types listed above, `obj` properties can have the following types:\r\n  * byte<> members: Buffer objects (converted using `ByteBuffer.wrap`)\r\n  * Numeric members: String or Number (converted using `Long.fromValue`)\r\n  * Protobuf message members: objects (converted using the message class constructor)\r\n* An `MsgGabe` instance `gabe` has the following methods:\r\n    * `gabe.encode()` serializes the `MsgGabe` instance and returns a ByteBuffer.js ^5.0 object.\r\n    * `gabe.toBuffer()` returns `this.encode().toBuffer()`.\r\n\r\nFor example, `MsgClientChatRoomInfo` can be used as follows:\r\n\r\n```js\r\nvar chatRoomInfo = new Steam.Internal.MsgClientChatRoomInfo({\r\n  steamIdChat: '103582791432594962'\r\n});\r\nvar buf = chatRoomInfo.toBuffer();\r\nvar chatRoomInfo2 = Steam.Internal.MsgClientChatRoomInfo.decode(buf);\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/seishun/node-steam-resources.git"
  },
  "scripts": {
    "prepublish": "svn checkout https://github.com/SteamRE/SteamKit/trunk/Resources/Protobufs protobufs && svn checkout https://github.com/SteamRE/SteamKit/trunk/Resources/SteamLanguage steam_language"
  },
  "version": "1.0.0"
}
